// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manage.proto

package Report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ManageCommand_CommandType int32

const (
	ManageCommand_CMT_INVALID ManageCommand_CommandType = 0
	// das->dps
	ManageCommand_CMT_REQ_REGISTER ManageCommand_CommandType = 1
	ManageCommand_CMT_REQ_LOGIN    ManageCommand_CommandType = 2
	// dps->das
	ManageCommand_CMT_REP_REGISTER ManageCommand_CommandType = 32769
	ManageCommand_CMT_REP_LOGIN    ManageCommand_CommandType = 32770
	// das->dps
	ManageCommand_CMT_REP_HEART ManageCommand_CommandType = 32771
)

var ManageCommand_CommandType_name = map[int32]string{
	0:     "CMT_INVALID",
	1:     "CMT_REQ_REGISTER",
	2:     "CMT_REQ_LOGIN",
	32769: "CMT_REP_REGISTER",
	32770: "CMT_REP_LOGIN",
	32771: "CMT_REP_HEART",
}
var ManageCommand_CommandType_value = map[string]int32{
	"CMT_INVALID":      0,
	"CMT_REQ_REGISTER": 1,
	"CMT_REQ_LOGIN":    2,
	"CMT_REP_REGISTER": 32769,
	"CMT_REP_LOGIN":    32770,
	"CMT_REP_HEART":    32771,
}

func (x ManageCommand_CommandType) String() string {
	return proto.EnumName(ManageCommand_CommandType_name, int32(x))
}
func (ManageCommand_CommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type ManageCommand struct {
	Cpuid        []byte                    `protobuf:"bytes,1,opt,name=cpuid,proto3" json:"cpuid,omitempty"`
	Tid          uint64                    `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
	SerialNumber uint32                    `protobuf:"varint,3,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Uuid         string                    `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	Type         ManageCommand_CommandType `protobuf:"varint,5,opt,name=type,enum=Report.ManageCommand_CommandType" json:"type,omitempty"`
	Paras        []*Param                  `protobuf:"bytes,6,rep,name=paras" json:"paras,omitempty"`
}

func (m *ManageCommand) Reset()                    { *m = ManageCommand{} }
func (m *ManageCommand) String() string            { return proto.CompactTextString(m) }
func (*ManageCommand) ProtoMessage()               {}
func (*ManageCommand) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ManageCommand) GetCpuid() []byte {
	if m != nil {
		return m.Cpuid
	}
	return nil
}

func (m *ManageCommand) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ManageCommand) GetSerialNumber() uint32 {
	if m != nil {
		return m.SerialNumber
	}
	return 0
}

func (m *ManageCommand) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ManageCommand) GetType() ManageCommand_CommandType {
	if m != nil {
		return m.Type
	}
	return ManageCommand_CMT_INVALID
}

func (m *ManageCommand) GetParas() []*Param {
	if m != nil {
		return m.Paras
	}
	return nil
}

func init() {
	proto.RegisterType((*ManageCommand)(nil), "Report.ManageCommand")
	proto.RegisterEnum("Report.ManageCommand_CommandType", ManageCommand_CommandType_name, ManageCommand_CommandType_value)
}

func init() { proto.RegisterFile("manage.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4f, 0x83, 0x30,
	0x18, 0x86, 0x2d, 0x63, 0x4b, 0xfc, 0x18, 0x5a, 0x3f, 0x17, 0x43, 0x3c, 0xd5, 0xed, 0xd2, 0x13,
	0x87, 0x19, 0x7f, 0xc0, 0x32, 0xc9, 0x24, 0xd9, 0x26, 0x56, 0xe2, 0x95, 0x74, 0xd2, 0x18, 0x12,
	0x81, 0x86, 0xc1, 0x61, 0xb7, 0xa9, 0x27, 0xff, 0xa1, 0x3f, 0xc7, 0x00, 0x23, 0xba, 0x53, 0xbf,
	0x3e, 0x7d, 0xde, 0xe6, 0x6d, 0x61, 0x98, 0xca, 0x4c, 0xbe, 0x29, 0x57, 0x17, 0x79, 0x99, 0xe3,
	0x40, 0x28, 0x9d, 0x17, 0xe5, 0xb5, 0xa5, 0x65, 0x21, 0xd3, 0x16, 0x8e, 0x7f, 0x0c, 0xb0, 0x57,
	0x8d, 0x35, 0xcf, 0xd3, 0x54, 0x66, 0x31, 0x8e, 0xa0, 0xff, 0xaa, 0xab, 0x24, 0x76, 0x08, 0x23,
	0x7c, 0x28, 0xda, 0x0d, 0x52, 0xe8, 0x95, 0x49, 0xec, 0x18, 0x8c, 0x70, 0x53, 0xd4, 0x23, 0x4e,
	0xc0, 0xde, 0xaa, 0x22, 0x91, 0xef, 0x51, 0x56, 0xa5, 0x1b, 0x55, 0x38, 0x3d, 0x46, 0xb8, 0x2d,
	0x86, 0x2d, 0x5c, 0x37, 0x0c, 0x11, 0xcc, 0xaa, 0xbe, 0xcb, 0x64, 0x84, 0x9f, 0x8a, 0x66, 0xc6,
	0x3b, 0x30, 0xcb, 0x9d, 0x56, 0x4e, 0x9f, 0x11, 0x7e, 0x36, 0xbd, 0x71, 0xdb, 0x5a, 0xee, 0x51,
	0x0b, 0xf7, 0xb0, 0x86, 0x3b, 0xad, 0x44, 0xa3, 0xe3, 0x04, 0xfa, 0x75, 0xf1, 0xad, 0x33, 0x60,
	0x3d, 0x6e, 0x4d, 0xed, 0x2e, 0x17, 0xd4, 0xaf, 0x11, 0xed, 0xd9, 0xf8, 0x9b, 0x80, 0xf5, 0x2f,
	0x8a, 0xe7, 0x60, 0xcd, 0x57, 0x61, 0xe4, 0xaf, 0x5f, 0x66, 0x4b, 0xff, 0x9e, 0x9e, 0xe0, 0x08,
	0x68, 0x0d, 0x84, 0xf7, 0x14, 0x09, 0x6f, 0xe1, 0x3f, 0x87, 0x9e, 0xa0, 0x04, 0x2f, 0xc0, 0xee,
	0xe8, 0xf2, 0x71, 0xe1, 0xaf, 0xa9, 0x81, 0x57, 0x9d, 0x18, 0xfc, 0x89, 0x1f, 0x7b, 0x03, 0x2f,
	0x3b, 0x35, 0x38, 0xa8, 0x9f, 0xc7, 0xf0, 0xc1, 0x9b, 0x89, 0x90, 0x7e, 0xed, 0x8d, 0xcd, 0xa0,
	0xf9, 0xe1, 0xdb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0xe1, 0x54, 0x23, 0x86, 0x01, 0x00,
	0x00,
}
